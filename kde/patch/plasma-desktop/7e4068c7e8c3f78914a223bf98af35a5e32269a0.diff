diff --git a/kcms/libkwindevices/CMakeLists.txt b/kcms/libkwindevices/CMakeLists.txt
index 15d5f6c44adbb3083ff993c40484bd1e3275c193..6363e89e4eabebc2e2cf47827bbe66d1eab3d235 100644
--- a/kcms/libkwindevices/CMakeLists.txt
+++ b/kcms/libkwindevices/CMakeLists.txt
@@ -3,7 +3,7 @@
 
 ecm_qt_declare_logging_category(kwindevices_SRCS
     HEADER
-        logging.h
+        kwindevices-logging.h
     IDENTIFIER
         LIBKWINDEVICES
     CATEGORY_NAME
diff --git a/kcms/libkwindevices/devicesmodel.cpp b/kcms/libkwindevices/devicesmodel.cpp
index 136ef36482b70919f62cbb469d0d7e85f330399d..f1beef3333a6154d7f7c6fc48c5b11f4778c5714 100644
--- a/kcms/libkwindevices/devicesmodel.cpp
+++ b/kcms/libkwindevices/devicesmodel.cpp
@@ -15,7 +15,7 @@
 #include <QDBusInterface>
 
 #include "inputdevice.h"
-#include "logging.h"
+#include "kwindevices-logging.h"
 
 DevicesModel::DevicesModel(const QByteArray &kind, QObject *parent)
     : QAbstractListModel(parent)
diff --git a/kcms/libkwindevices/inputdevice.cpp b/kcms/libkwindevices/inputdevice.cpp
index 9a437137077390a61152be96ac69b4f5e992d062..f37bf2738d4366b4ac710e3b264ca17396ac5481 100644
--- a/kcms/libkwindevices/inputdevice.cpp
+++ b/kcms/libkwindevices/inputdevice.cpp
@@ -8,46 +8,6 @@
 
 #include <QList>
 
-#include "logging.h"
-
-template<typename T>
-bool InputDevice::Prop<T>::save()
-{
-    if (!isSupported() || !m_value || m_prop.isConstant()) {
-        qCDebug(LIBKWINDEVICES) << "skipping" << this << m_value.has_value() << isSupported() << m_prop.name();
-        return false;
-    }
-
-    auto iface = m_device->m_iface.get();
-    const bool ret = m_prop.write(iface, *m_value);
-    if (ret) {
-        m_configValue = *m_value;
-    }
-    return ret;
-}
-
-template<typename T>
-void InputDevice::Prop<T>::set(T newVal)
-{
-    if (!m_value) {
-        value();
-    }
-
-    Q_ASSERT(isSupported());
-    if (m_value != newVal) {
-        m_value = newVal;
-        if (m_changedSignalFunction) {
-            (m_device->*m_changedSignalFunction)();
-        }
-    }
-}
-
-template<typename T>
-bool InputDevice::Prop<T>::changed() const
-{
-    return m_value.has_value() && m_value.value() != m_configValue;
-}
-
 InputDevice::InputDevice(const QString &dbusName, QObject *parent)
     : QObject(parent)
 {
diff --git a/kcms/libkwindevices/inputdevice.h b/kcms/libkwindevices/inputdevice.h
index 93f9753cfae3c8795c5493566f7e51c806710983..4dc9ca02a7edc27a951e3bf89a7c803077623efc 100644
--- a/kcms/libkwindevices/inputdevice.h
+++ b/kcms/libkwindevices/inputdevice.h
@@ -15,6 +15,8 @@
 
 #include <optional>
 
+#include "kwindevices-logging.h"
+
 class InputDevice : public QObject
 {
     Q_OBJECT
@@ -225,7 +227,7 @@ private:
         {
             int idx = OrgKdeKWinInputDeviceInterface::staticMetaObject.indexOfProperty(propName);
             if (idx < 0) {
-                qDebug() << "there is no" << propName;
+                qCDebug(LIBKWINDEVICES) << "there is no" << propName;
             }
             Q_ASSERT(idx >= 0);
             m_prop = OrgKdeKWinInputDeviceInterface::staticMetaObject.property(idx);
@@ -269,12 +271,29 @@ private:
             }
         }
 
-        void set(T newVal);
+        void set(T newVal) {
+            if (!m_value) {
+                value();
+            }
+        
+            Q_ASSERT(isSupported());
+            if (m_value != newVal) {
+                m_value = newVal;
+                if (m_changedSignalFunction) {
+                    (m_device->*m_changedSignalFunction)();
+                }
+            }
+        }
+
         T defaultValue() const
         {
             return m_defaultValueFunction ? (m_device->m_iface.get()->*m_defaultValueFunction)() : T();
         }
-        bool changed() const;
+        
+        bool changed() const {
+            return m_value.has_value() && m_value.value() != m_configValue;
+        }
+
         void set(const Prop<T> &p)
         {
             set(p.value());
@@ -286,7 +305,20 @@ private:
             return !m_supportedFunction || (iface->*m_supportedFunction)();
         }
 
-        bool save();
+        bool save() {
+            if (!isSupported() || !m_value || m_prop.isConstant()) {
+                qCDebug(LIBKWINDEVICES) << "skipping" << this << m_value.has_value() << isSupported() << m_prop.name();
+                return false;
+            }
+        
+            auto iface = m_device->m_iface.get();
+            const bool ret = m_prop.write(iface, *m_value);
+            if (ret) {
+                m_configValue = *m_value;
+            }
+            return ret;
+        }
+
         bool isDefaults() const
         {
             return m_value == defaultValue();
